[kojid]
; The number of seconds to sleep between tasks
; sleeptime=15

; The maximum number of jobs that kojid will handle at a time
; maxjobs=10

; The minimum amount of free space (in MBs) required for each build root
; minspace=8192

; The directory root where work data can be found from the koji hub
; topdir=/mnt/koji

; The directory root for temporary storage
; workdir=/tmp/koji

; The temporary directory in buildroot
; chroot_tmpdir = /chroot_tmpdir

; The directory root for mock
; mockdir=/var/lib/mock

; The user to run as when doing builds
; mockuser=kojibuilder

; The vendor to use in rpm headers
; vendor=Koji

; The packager to use in rpm headers
; packager=Koji

; The distribution to use in rpm headers
; distribution=Koji

; The _host string to use in mock
; mockhost=koji-linux-gnu

; Timeout for build duration (24 hours)
; rpmbuild_timeout=86400

; Install timeout(seconds) for image build
; Default value is 0, which means using the number in /etc/oz/oz.cfg,
; supported since oz-0.16.0
; oz_install_timeout=7200

; The URL for the xmlrpc server
server=https://kojidev.{{ KOJI_DOMAIN }}/kojihub

; The URL for the file access
; Cannot use https with our custom CA here yet, see
; https://github.com/rpm-software-management/mock/issues/588
topurl=http://kojidev.{{ KOJI_DOMAIN }}/kojifiles

; use createrepo_c rather than createrepo
; use_createrepo_c=False

; A space-separated list of tuples from which kojid is allowed to checkout.
; The format of those tuples is:
;
;     host:repository[:use_common[:source_cmd]]
;
; Incorrectly-formatted tuples will be ignored.
;
; If use_common is not present, kojid will attempt to checkout a common/
; directory from the repository.  If use_common is set to no, off, false, or 0,
; it will not attempt to checkout a common/ directory.
;
; source_cmd is a shell command (args separated with commas instead of spaces)
; to run before building the srpm. It is generally used to retrieve source
; files from a remote location.  If no source_cmd is specified, "make sources"
; is run by default.
allowed_scms=
  !src.fedoraproject.org:/pagure/fork/*
  !src.fedoraproject.org:/pagure/forks/*
  src.fedoraproject.org:/*:false:fedpkg,sources

; The mail host to use for sending email notifications
;smtphost=example.com

; The From address used when sending email notifications
;from_addr=Koji Build System <buildsys@example.com>

;configuration for Kerberos authentication

;the format of the principal used by the build hosts
;%s will be replaced by the FQDN of the host
;host_principal_format = compile/%s@KOJIDEV.EXAMPLE.COM
; kojid uses socket.fqdn() to find the FQDN for a host. That code looks at the
; public IP address for a host and does a DNS lookup for the PTR record of that
; IP address. If the host is running in a cloud environment, that is almost
; certainly not what you want, and the PTR record will be something out of your
; control.
; You can override the (imho broken) auto-discovery by setting krb_principal
; directly here:
krb_principal = compile/kojidev.{{ KOJI_DOMAIN }}@KOJIDEV.{{ KOJI_DOMAIN | upper }}

;location of the keytab
;keytab = /etc/kojid/kojid.keytab
keytab = /var/local/compile.kojidev.{{ KOJI_DOMAIN }}.keytab

;the service name of the principal being used by the hub
;krbservice = host

;configuration for SSL authentication

;client certificate
;cert = /etc/kojid/client.crt

;certificate of the CA that issued the HTTP server certificate
;serverca = /etc/kojid/serverca.crt

;if set to True, failing subtask will not automatically cancel other siblings
;build_arch_can_fail = False

;if set to True additional logs with timestamps will get created and uploaded
;to hub. It could be useful for debugging purposes, but creates twice as many
;log files
;log_timestamps = False
